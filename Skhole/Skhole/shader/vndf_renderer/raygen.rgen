#version 460
#extension GL_EXT_ray_tracing : enable
#extension GL_ARB_shading_language_include : require
#extension GL_EXT_scalar_block_layout : enable

#define PI 3.14159265359

#include "./payload.glsl"
#include "../common/hash.glsl"
#include "../common/math.glsl"
#include "../common/bsdf/lambert.glsl"

layout(location = 0) rayPayloadEXT PayLoadStruct payload;

layout(binding = 0) uniform accelerationStructureEXT topLevelAS;
layout(binding = 1, rgba8) uniform image2D image;

layout(binding = 2, rgba32f) uniform image2D accumImage;

layout(binding = 3, scalar) uniform UBO {
    uint spp;
    uint frame;
    uint numSample;
//    uint samplePerFrame;
    uint mode;

    uint width;
    uint height;

    vec3 cameraPos;
    vec3 cameraDir;
    vec3 cameraUp;
    vec3 cameraRight;

    vec4 cameraParam;
} ubo;

struct Ray{
    vec3 origin;
    vec3 direction;
};

vec3 GetPinholeCameraDir(vec3 cameraDir,vec3 cameraUp,vec3 cameraRight,vec2 uv, float f){
    return normalize(uv.y * cameraUp + uv.x * cameraRight + f * cameraDir);
}

void main()
{
    seed = ((gl_LaunchIDEXT.x + gl_LaunchIDEXT.y * ubo.width) + 1) * ubo.numSample;

    vec2 uv = (vec2(gl_LaunchIDEXT.xy + rnd2()) * 2.0 - gl_LaunchSizeEXT.xy) / vec2(gl_LaunchSizeEXT.y);
    uv.y  = -uv.y;

    vec3 origin = ubo.cameraPos;

    Ray ray;
    ray.origin = ubo.cameraPos;
        
    float fov = ubo.cameraParam.x;
    float f = 1.0 / (atan(fov * 0.5 * PI / 180.0f));

    ray.direction = GetPinholeCameraDir(
        ubo.cameraDir,
        ubo.cameraUp,
        ubo.cameraRight,
        uv,
        f
    );

    payload.basecolor = vec3(0);
    payload.normal = vec3(0);
    payload.isMiss = false;
    payload.isLight = false;
    payload.emission = vec3(0);

    vec3 fBaseColor = vec3(0);
    vec3 fNormal = vec3(0);

    vec3 LTE = vec3(0.0);
    vec3 throughput = vec3(1.0);
    float p0 = 1.0;

    for(int depth = 0; depth < 5; depth++){
        
        p0 = min(max(max(throughput.x,throughput.y),throughput.z),1.0); 
        if(p0 < rnd1()){
            break;
        }
        throughput /= p0;

		traceRayEXT(
			topLevelAS,
			gl_RayFlagsOpaqueEXT,
			0xff,       
			0, 0, 0,  
			ray.origin,
			0.001,     
			ray.direction,
			10000.0,   
			0       
		);
        

        if(payload.isMiss)
        {
            LTE += throughput * vec3(1.0);
            break;
        }

        if(depth == 0){
            fBaseColor = payload.basecolor;
            fNormal = payload.normal;
        }

        if(payload.isLight){
            LTE += throughput * payload.emission; 
            break;
        }
        
        vec3 position = payload.position;
        vec3 normal = payload.normal;
        
        vec3 wo = -ray.direction; 
        
        vec3 t,b;
        tangentSpaceBasis(normal,t,b);
        
        float pdf;

        vec3 localwo = worldtoLoacal(wo,t,normal,b);
        vec3 localwi;

        vec3 basecolor = payload.basecolor;
        float metallic = payload.metallic;
        float roughness = payload.roughness;
        float anisotropic = payload.anisotropic;
        vec2 xi = rnd2();
        vec3 bsdf;

        if(metallic > 0.5)
        {
			GGX_Params param;
			param.F0 = basecolor;
			param.roughness = roughness;
			param.anisotropic = anisotropic;

			bsdf = GGX_Sample(localwo,xi,param,localwi,pdf);
        }
        else{
			bsdf = LambertBSDF_Sample(localwo,basecolor,xi,localwi,pdf);
        }

        vec3 wi = localToWorld(localwi,t,normal,b);

        float cosine = abs(localwi.y);
        throughput *= bsdf * cosine / pdf;

        ray.origin = position;
        ray.direction = wi;

    }

    vec3 col = LTE;
    if(ubo.mode == 1){
		col = fBaseColor;
    }
    else if(ubo.mode == 2){
        col = (fNormal + 1.0) * 0.5;
	}

    if(ubo.numSample != 1){
        vec3 accumCol = imageLoad(accumImage, ivec2(gl_LaunchIDEXT.xy)).xyz; 
        if(ubo.numSample != ubo.spp){
            col += accumCol;
        }
        else{
            col = accumCol;
        }
    }
    
    imageStore(accumImage,ivec2(gl_LaunchIDEXT.xy), vec4(col,0.0));
    imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(col,0.0) / (ubo.numSample));
}
