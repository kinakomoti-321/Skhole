#version 460
#extension GL_EXT_ray_tracing : enable
#extension GL_ARB_shading_language_include : require
#extension GL_EXT_scalar_block_layout : enable

#define PI 3.14159265359

#include "./payload.glsl"
#include "../common/hash.glsl"
#include "../common/math.glsl"
#include "../common/bsdf.glsl"

layout(location = 0) rayPayloadEXT PayLoadStruct payload;

layout(binding = 0) uniform accelerationStructureEXT topLevelAS;
layout(binding = 1, rgba8) uniform image2D image;

layout(binding = 2, rgba32f) uniform image2D accumImage;

layout(binding = 3, scalar) uniform UBO {
    uint maxSPP;
    uint numSPP;
    uint sppPerFrame;
    uint frame;
    uint resetFlag;
    uint mode;

    uint width;
    uint height;

    vec3 cameraPos;
    vec3 cameraDir;
    vec3 cameraUp;
    vec3 cameraRight;

    vec4 cameraParam;

    vec3 lightPos;
    vec4 lightcol;
    float lightintensity;

} ubo;

struct Ray{
    vec3 origin;
    vec3 direction;
};

vec3 GetPinholeCameraDir(vec3 cameraDir,vec3 cameraUp,vec3 cameraRight,vec2 uv, float f){
    return normalize(uv.y * cameraUp + uv.x * cameraRight + f * cameraDir);
}

struct BSDFParameter
{
vec3 basecolor;
float metallic;
float roughness;
float anisotropic;

bool isGlass;
float ior;

bool isSand;
};

float ComplexBSDF_PDF(vec3 wo, inout vec3 wi, BSDFParameter param){
    GGX_Params ggxParam;
    ggxParam.F0 = param.basecolor;
    ggxParam.roughness = param.roughness;
    ggxParam.anisotropic = param.anisotropic;

    float diffuseWeight = (1.0 - param.metallic);  
    float specularWeight = 1.0;

    float sumWeight = diffuseWeight + specularWeight;

    float diffusePDF = diffuseWeight / sumWeight;
    float specularPDF = specularWeight / sumWeight;

    float dp = LambertBSDF_PDF(wo,wi);
    float sp = GGX_PDF(wo,wi,ggxParam);
    
    float pdf = dp * diffusePDF + sp * specularPDF;

    return pdf;
}

vec3 ComplexBSDF_Evaluate(vec3 wo, vec3 wi, BSDFParameter param){
    GGX_Params ggxParam;
    ggxParam.F0 = mix(vec3(0.04),param.basecolor, param.metallic);
    ggxParam.roughness = param.roughness;
    ggxParam.anisotropic = param.anisotropic;

    vec3 diffuse = LambertBSDF_Evaluation(wo,wi,param.basecolor);
    vec3 specular = GGX_Evaluation(wo,wi,ggxParam);

    return (1.0f - param.metallic) * diffuse + specular;
}

vec3 ComplexBSDF_Sample(vec3 wo, inout vec3 wi, BSDFParameter param, inout float pdf){
    float diffuseWeight = (1.0 - param.metallic);  
    float specularWeight = 1.0;

    float sumWeight = diffuseWeight + specularWeight;

    float diffusePDF = diffuseWeight / sumWeight;
    float specularPDF = specularWeight / sumWeight;

    float sampleSelectP = rnd1();

    float dp;
    float sp;

    GGX_Params ggxParam;
    ggxParam.F0 = param.basecolor;
    ggxParam.roughness = param.roughness;
    ggxParam.anisotropic = param.anisotropic;

    vec2 xi = rnd2();
    if(sampleSelectP <= diffusePDF){
        wi = LambertBSDF_Sample(wo, dp, xi);
        sp = GGX_PDF(wo,wi,ggxParam);
	}
    else{
        wi = GGX_Sample(wo, sp, ggxParam, xi); 
        dp = LambertBSDF_PDF(wo,wi);
    }

    if(wi.y < 0.0){
        pdf = 0.0;
		return vec3(0.0);
	}
    
    pdf = dp * diffusePDF + sp * specularPDF;

    return ComplexBSDF_Evaluate(wo,wi,param);
}

vec3 BSDF_Evaluate(vec3 wo, vec3 wi, BSDFParameter param)
{
    if(param.isGlass){
        return vec3(0.0);
    }
    else
    {
        return ComplexBSDF_Evaluate(wo,wi, param);
    }
}

float BSDF_PDF(vec3 wo, inout vec3 wi, BSDFParameter param)
{
    if(param.isGlass){
		return 0.0;
	}
	else
	{
        return ComplexBSDF_PDF(wo,wi,param);
    }
}

vec3 BSDF_Sample(vec3 wo, inout vec3 wi, BSDFParameter param, inout float pdf)
{
    if(param.isGlass){
        pdf = 1.0; 
        return IdealRefractionBTDF_Sample(wo,wi,param.ior,rnd2());    
	}
	else
	{
        return ComplexBSDF_Sample(wo,wi,param,pdf);
    }
}

void Raytrace(Ray ray, float minT, float maxT){
	traceRayEXT(
		topLevelAS,
		gl_RayFlagsOpaqueEXT,
		0xff,       
		0, 0, 0,  
		ray.origin,
		minT,     
		ray.direction,
		maxT,   
		0       
	);
}

// A x^2 + B x + C = 0
int QuadricSolver(float A, float B, float C, float sol1, float sol2){
    int solCount = 0;
    float D = B * B - 4.0 * A * C;
    if(D < 0){
        sol1 = -10000;
        sol2 = -10000;
        return 0;
    }
    if(abs(D) < 0.0001){
        // Multiple Root
        sol1 = - B / (A*2);
        sol2 = -10000;
        return 1;
    }

    sol1 = (- B + sqrt(D)) / (A*2);
    sol2 = (- B - sqrt(D)) / (A*2);

    return 2;
}

vec2 ConvertBarycetric(float a, int index){
    vec2 barycentric;
    if(index == 0){
        // Beta = 0;
        barycentric = vec2(a,0);
    }
    else if(index == 1){
        // Alpha + Beta = 1
        barycentric = vec2(1 - a,a);
    }
    else if(index == 2){
       // Alpha = 0 
       barycentric = vec2(0,a);
    }

    return barycentric;
}

void SolveTriangle(vec3 v[3], vec3 n[3], vec3 L, vec3 P, inout vec2 sol_bary[2], int sol_count, float sol_sign[2], int edge_index[2]){
    vec3 v0 = v[0];
    vec3 v1 = v[1];
    vec3 v2 = v[2];

    vec3 n0 = n[0];
    vec3 n1 = n[1];
    vec3 n2 = n[2];

    mat3 mN = mat3(n0,n1,n2);

    vec3 PL = L - P;
    vec3 V0V1 = v1 - v0;
    vec3 V0V2 = v2 - v0;
    vec3 PV0 = v0 - P;

    mat3 mQ = mat3(cross(PL,V0V1), cross(PL,V0V2), cross(PL,PV0));
    mQ = transpose(mQ);

    mat3 mCoplaner = mN * mQ;

    // A a^2 + B b^2 + C ab + D a + E b + F = 0
    float A = mCoplaner[0][0];
    float B = mCoplaner[1][1];
    float C = mCoplaner[0][1] + mCoplaner[1][0];
    float D = mCoplaner[0][2] + mCoplaner[2][0];
    float E = mCoplaner[1][2] + mCoplaner[2][1];
    float F = mCoplaner[2][2];

    int count = 0;
    vec2 sol[2];
    int edgeIndex[2];

    // Alpha
    float quadA[3] = {A,A+B-C,B};
    float quadB[3] = {D,C + E - 2.0 * A - D,E};
    float quadC[3] = {F,A + D + F,F};

    float testSol[6];

    int counts[3];
    for(int i = 0; i < 3; i++){

        float solusions[2]; 
        int solCount = QuadricSolver(quadA[i], quadB[i], quadC[i],solusions[0],solusions[1]);

        testSol[i * 2] = solusions[0];
        testSol[i * 2 + 1] = solusions[1];
        counts[i] = solCount;
        if(solCount == 0) continue;

        for(int j = 0; j < 2; j++){
            if(solusions[j] < 1 && solusions[j] > 0){
                sol[count] = ConvertBarycetric(solusions[j],i);
                edgeIndex[count] = i;
                count++;
            }

            if(count == 2) break;
        }
    }

    // Tangent
    vec3 tangent[2];
    float tanSign[2];

    mat3 mConicMatrix = mat3(A, 0.5 * C, 0.5 * D,
                                0.5 * C, B, 0.5 * E,
                                0.5 * D, 0.5 * E, F);

    for(int i = 0; i < 2; i++){
        vec3 solusionVector = vec3(sol[i].x,sol[i].y,1);
        vec3 curveBinormal = transpose(mConicMatrix) * solusionVector;

        vec3 pM = (1.0 - sol[i].x - sol[i].y) * v0 + sol[i].x * v1 + sol[i].y * v2;
        vec3 nM = (1.0 - sol[i].x - sol[i].y) * n0 + sol[i].x * n1 + sol[i].y * n2;

        vec3 wo = normalize(P - pM);
        vec3 wi_ref = refract(-wo,nM, 1.33 / 1.0);
        vec3 wi = normalize(L - pM);

        tangent[i] = normalize(vec3(-curveBinormal.y,curveBinormal.x,0)); 
        
        float s = sign(dot(tangent[i],cross(wi_ref,wi)));
        tanSign[i] = s; 
    }

    sol_bary = sol;
    sol_count = count;
    sol_sign = tanSign;
    edge_index = edgeIndex;
}

vec3 EvaluateCausticsPath(vec3 Point, vec3 LightPos,uint intanceID,uint primID, float ior){
    
    return vec3(0.0);
}

vec3 Pathtrace(Ray ray, inout vec3 fBaseColor, inout vec3 fNormal)
{
    vec3 LTE = vec3(0.0);
    vec3 throughput = vec3(1.0);
    float p0 = 1.0;

    for(int depth = 0; depth < 5; depth++){
        p0 = min(max(max(throughput.x,throughput.y),throughput.z),1.0); 
        if(p0 < rnd1()){
            break;
        }
        throughput /= p0;

        Raytrace(ray,0.001,10000.0);

        if(payload.isMiss)
        {
            LTE += throughput * vec3(0.0);
            break;
        }

        if(depth == 0){
            fBaseColor = payload.basecolor;
            fNormal = payload.normal;
        }

        if(payload.isLight){
            LTE += throughput * payload.emission; 
            break;
        }
        
        vec3 position = payload.position;
        vec3 normal = payload.normal;
        
        vec3 wo = -ray.direction; 
        
        vec3 t,b;
        tangentSpaceBasis(normal,t,b);
        
        float pdf;

        vec3 localwo = worldtoLoacal(wo,t,normal,b);
        vec3 localwi;

        vec3 basecolor = payload.basecolor;
        float metallic = payload.metallic;
        float roughness = payload.roughness;
        float anisotropic = payload.anisotropic;
        vec2 xi = rnd2();
        vec3 bsdf;

        BSDFParameter bsdfParam;
        bsdfParam.basecolor = basecolor;
        bsdfParam.metallic = metallic;
        bsdfParam.roughness = roughness;
        bsdfParam.anisotropic = anisotropic;
        bsdfParam.isGlass = payload.isGlass;
        bsdfParam.ior = payload.ior;

        bsdf = BSDF_Sample(localwo,localwi,bsdfParam,pdf);
        {
            // Light
            vec3 lightDir = normalize(ubo.lightPos - position);
            vec3 lightEmission = ubo.lightcol.xyz * ubo.lightintensity; 

            float lightDistance = distance(ubo.lightPos,position);

            Ray shadowRay;
            shadowRay.origin = position;
            shadowRay.direction = lightDir;

            Raytrace(shadowRay,0.001,lightDistance - 0.001);

            if(payload.isMiss){
				vec3 localLightDir = worldtoLoacal(lightDir,t,normal,b);
				vec3 lightBSDF = BSDF_Evaluate(localwo,localLightDir, bsdfParam);
				float cosine = abs(localLightDir.y);
				LTE += throughput * lightEmission * lightBSDF * cosine / (lightDistance * lightDistance);
            }
            else if(payload.isGlass)
            {
               LTE += throughput * EvaluateCausticsPath(position, ubo.lightPos ,payload.instanceID,payload.primID,payload.ior) * lightEmission; 
            }
        }
        vec3 wi = localToWorld(localwi,t,normal,b);

        float cosine = abs(localwi.y);
        throughput *= bsdf * cosine / pdf;

        ray.direction = wi;
        ray.origin = position + wi * 0.001;

    }
    
    return LTE;
}

void main()
{
    seed = ((gl_LaunchIDEXT.x + gl_LaunchIDEXT.y * ubo.width) + 1) * (ubo.numSPP + 1);


    payload.basecolor = vec3(0);
    payload.normal = vec3(0);
    payload.isMiss = false;
    payload.isLight = false;
    payload.emission = vec3(0);

    vec3 sumLTE = vec3(0);
    vec3 sumBaseColor = vec3(0);
    vec3 sumNormal = vec3(0);

    int spf = int(ubo.sppPerFrame);
    int spp = int(ubo.numSPP);
    int maxSPP = int(ubo.maxSPP);

    for(int s = 0; s < spf; s++){
        if(spp >= maxSPP){
			break;
		}

		vec2 uv = (vec2(gl_LaunchIDEXT.xy + rnd2()) * 2.0 - gl_LaunchSizeEXT.xy) / vec2(gl_LaunchSizeEXT.y);
		uv.y  = -uv.y;

		vec3 origin = ubo.cameraPos;

		Ray ray;
		ray.origin = ubo.cameraPos;
			
		float fov = ubo.cameraParam.x;
		float f = 1.0 / (atan(fov * 0.5 * PI / 180.0f));

		ray.direction = GetPinholeCameraDir(
			ubo.cameraDir,
			ubo.cameraUp,
			ubo.cameraRight,
			uv,
			f
		);

		vec3 fBaseColor = vec3(0.0);
		vec3 fNormal = vec3(0.0);
		vec3 LTE = Pathtrace(ray,fBaseColor,fNormal);
        if(isnan(LTE.x) || isnan(LTE.y) || isnan(LTE.z)){
            LTE = vec3(0.0);
		}

		sumLTE += LTE;
		sumBaseColor += fBaseColor;
		sumNormal += fNormal;
        spp++;
	}

    vec3 accumLTE = vec3(0.0);
    if(ubo.numSPP != 0){
        // Accumulate
        accumLTE += imageLoad(accumImage, ivec2(gl_LaunchIDEXT.xy)).xyz;
    }

    accumLTE += sumLTE;

    imageStore(accumImage,ivec2(gl_LaunchIDEXT.xy), vec4(accumLTE,0.0));
    imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(accumLTE,0.0) / float(spp));
}
