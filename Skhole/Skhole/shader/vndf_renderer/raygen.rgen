#version 460
#extension GL_EXT_ray_tracing : enable
#extension GL_ARB_shading_language_include : require
#extension GL_EXT_scalar_block_layout : enable

#define PI 3.14159265359

#include "./payload.glsl"
#include "../common/hash.glsl"
#include "../common/math.glsl"
#include "../common/bsdf.glsl"

layout(location = 0) rayPayloadEXT PayLoadStruct payload;

layout(binding = 0) uniform accelerationStructureEXT topLevelAS;
layout(binding = 1, rgba8) uniform image2D image;

layout(binding = 2, rgba32f) uniform image2D accumImage;

layout(binding = 3, scalar) uniform UBO {
    uint maxSPP;
    uint numSPP;
    uint sppPerFrame;
    uint frame;
    uint resetFlag;
    uint mode;

    uint width;
    uint height;

    vec3 cameraPos;
    vec3 cameraDir;
    vec3 cameraUp;
    vec3 cameraRight;

    vec4 cameraParam;
} ubo;

struct Ray{
    vec3 origin;
    vec3 direction;
};

vec3 GetPinholeCameraDir(vec3 cameraDir,vec3 cameraUp,vec3 cameraRight,vec2 uv, float f){
    return normalize(uv.y * cameraUp + uv.x * cameraRight + f * cameraDir);
}

struct BSDFParameter
{
vec3 basecolor;
float metallic;
float roughness;
float anisotropic;

bool isGlass;

bool isSand;
};

vec3 BSDF_Evaluate(vec3 wo, vec3 wi, BSDFParameter param)
{
    GGX_Params ggxParam;
    ggxParam.F0 = mix(vec3(0.04),param.basecolor, param.metallic);
    ggxParam.roughness = param.roughness;
    ggxParam.anisotropic = param.anisotropic;

    vec3 diffuse = LambertBSDF_Evaluation(wo,wi,param.basecolor);
    vec3 specular = GGX_Evaluation(wo,wi,ggxParam);

    return (1.0f - param.metallic) * diffuse + specular;
}

float BSDF_PDF(vec3 wo, inout vec3 wi, BSDFParameter param)
{
    GGX_Params ggxParam;
    ggxParam.F0 = param.basecolor;
    ggxParam.roughness = param.roughness;
    ggxParam.anisotropic = param.anisotropic;

    float diffuseWeight = (1.0 - param.metallic);  
    float specularWeight = 1.0;

    float sumWeight = diffuseWeight + specularWeight;

    float diffusePDF = diffuseWeight / sumWeight;
    float specularPDF = specularWeight / sumWeight;

    float dp = LambertBSDF_PDF(wo,wi);
    float sp = GGX_PDF(wo,wi,ggxParam);
    
    float pdf = dp * diffusePDF + sp * specularPDF;

    return pdf;
}

vec3 BSDF_Sample(vec3 wo, inout vec3 wi, BSDFParameter param, inout float pdf)
{
    float diffuseWeight = (1.0 - param.metallic);  
    float specularWeight = 1.0;

    float sumWeight = diffuseWeight + specularWeight;

    float diffusePDF = diffuseWeight / sumWeight;
    float specularPDF = specularWeight / sumWeight;

    float sampleSelectP = rnd1();

    float dp;
    float sp;

    GGX_Params ggxParam;
    ggxParam.F0 = param.basecolor;
    ggxParam.roughness = param.roughness;
    ggxParam.anisotropic = param.anisotropic;

    vec2 xi = rnd2();
    if(sampleSelectP <= diffusePDF){
        wi = LambertBSDF_Sample(wo, dp, xi);
        sp = GGX_PDF(wo,wi,ggxParam);
	}
    else{
        wi = GGX_Sample(wo, sp, ggxParam, xi); 
        dp = LambertBSDF_PDF(wo,wi);
    }

    if(wi.y < 0.0){
        pdf = 0.0;
		return vec3(0.0);
	}
    
    pdf = dp * diffusePDF + sp * specularPDF;

    return BSDF_Evaluate(wo,wi,param);
}




vec3 Pathtrace(Ray ray, inout vec3 fBaseColor, inout vec3 fNormal)
{
    vec3 LTE = vec3(0.0);
    vec3 throughput = vec3(1.0);
    float p0 = 1.0;

    for(int depth = 0; depth < 5; depth++){
        p0 = min(max(max(throughput.x,throughput.y),throughput.z),1.0); 
        if(p0 < rnd1()){
            break;
        }
        throughput /= p0;

		traceRayEXT(
			topLevelAS,
			gl_RayFlagsOpaqueEXT,
			0xff,       
			0, 0, 0,  
			ray.origin,
			0.001,     
			ray.direction,
			10000.0,   
			0       
		);
        

        if(payload.isMiss)
        {
            LTE += throughput * vec3(0.0);
            break;
        }

        if(depth == 0){
            fBaseColor = payload.basecolor;
            fNormal = payload.normal;
        }

        if(payload.isLight){
            LTE += throughput * payload.emission; 
            break;
        }
        
        vec3 position = payload.position;
        vec3 normal = payload.normal;
        
        vec3 wo = -ray.direction; 
        
        vec3 t,b;
        tangentSpaceBasis(normal,t,b);
        
        float pdf;

        vec3 localwo = worldtoLoacal(wo,t,normal,b);
        vec3 localwi;

        vec3 basecolor = payload.basecolor;
        float metallic = payload.metallic;
        float roughness = payload.roughness;
        float anisotropic = payload.anisotropic;
        vec2 xi = rnd2();
        vec3 bsdf;

        BSDFParameter bsdfParam;
        bsdfParam.basecolor = basecolor;
        bsdfParam.metallic = metallic;
        bsdfParam.roughness = roughness;
        bsdfParam.anisotropic = anisotropic;

        bsdf = BSDF_Sample(localwo,localwi,bsdfParam,pdf);
//        localwi = LambertBSDF_Sample(localwo,pdf,xi);
//        bsdf = LambertBSDF_Evaluation(localwo,localwi,basecolor);
//
        vec3 wi = localToWorld(localwi,t,normal,b);

        float cosine = abs(localwi.y);
        throughput *= bsdf * cosine / pdf;

        ray.origin = position;
        ray.direction = wi;

    }
    
    return LTE;
}

void main()
{
    seed = ((gl_LaunchIDEXT.x + gl_LaunchIDEXT.y * ubo.width) + 1) * (ubo.numSPP + 1);


    payload.basecolor = vec3(0);
    payload.normal = vec3(0);
    payload.isMiss = false;
    payload.isLight = false;
    payload.emission = vec3(0);

    vec3 sumLTE = vec3(0);
    vec3 sumBaseColor = vec3(0);
    vec3 sumNormal = vec3(0);

    int spf = int(ubo.sppPerFrame);
    int spp = int(ubo.numSPP);
    int maxSPP = int(ubo.maxSPP);

    for(int s = 0; s < spf; s++){
        if(spp >= maxSPP){
			break;
		}

		vec2 uv = (vec2(gl_LaunchIDEXT.xy + rnd2()) * 2.0 - gl_LaunchSizeEXT.xy) / vec2(gl_LaunchSizeEXT.y);
		uv.y  = -uv.y;

		vec3 origin = ubo.cameraPos;

		Ray ray;
		ray.origin = ubo.cameraPos;
			
		float fov = ubo.cameraParam.x;
		float f = 1.0 / (atan(fov * 0.5 * PI / 180.0f));

		ray.direction = GetPinholeCameraDir(
			ubo.cameraDir,
			ubo.cameraUp,
			ubo.cameraRight,
			uv,
			f
		);

		vec3 fBaseColor = vec3(0.0);
		vec3 fNormal = vec3(0.0);
		vec3 LTE = Pathtrace(ray,fBaseColor,fNormal);
        if(isnan(LTE.x) || isnan(LTE.y) || isnan(LTE.z)){
            LTE = vec3(0.0);
		}

		sumLTE += LTE;
		sumBaseColor += fBaseColor;
		sumNormal += fNormal;
        spp++;
	}

    vec3 accumLTE = vec3(0.0);
    if(ubo.numSPP != 0){
        // Accumulate
        accumLTE += imageLoad(accumImage, ivec2(gl_LaunchIDEXT.xy)).xyz;
    }

    accumLTE += sumLTE;

    imageStore(accumImage,ivec2(gl_LaunchIDEXT.xy), vec4(accumLTE,0.0));
    imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(accumLTE,0.0) / float(spp));
}
